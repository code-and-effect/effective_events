-# Displayed on the tickets step
- event = form.object.event
- tickets = event.event_tickets.reject(&:archived?)
- waitlist = tickets.any? { |ticket| ticket.waitlist? }

- all_members_tickets = tickets.all? { |ticket| ticket.members? }
- any_members_tickets = tickets.any? { |ticket| ticket.members? }
- is_member = current_user.try(:membership_present?)

- if event.early_bird?
  .alert.alert-warning.mb-3
    Early Bird rates end on
    = event.early_bird_end_at.strftime("%A, %B %d, %Y at %l:%M%P.")

%table.table.table-sm.table-striped
  %thead
    %tr
      %th Ticket
      %th Price
      %th Quantity

  %tbody
    - tickets.each do |ticket|
      %tr
        %td
          = ticket.to_s
          - if ticket.capacity.present? && ticket.display_capacity?
            %br
            %small
              #{event.capacity_available(event_ticket: ticket, event_registration: form.object)} remaining
              - if ticket.waitlist?
                before waitlist
        %td
          %ul.list-unstyled.mb-0

            - if event.early_bird? && ticket.early_bird_price.present?
              %li
                = price_to_currency(ticket.early_bird_price)
                .badge.badge-warning Early Bird
            - elsif ticket.members?
              %li
                = price_to_currency(ticket.member_price)
                .badge.badge-secondary Member

              - if ticket.guest_of_member? && (current_user.try(:membership_present?) || current_user.is_any?(:member))
                %li
                  = price_to_currency(ticket.guest_of_member_price)
                  .badge.badge-secondary Guest of Member

            - elsif ticket.anyone?
              - all_same_price = [ticket.member_price, (ticket.guest_of_member_price if ticket.guest_of_member?), ticket.non_member_price].compact.uniq.length == 1

              - if all_same_price
                %li
                  = price_to_currency(ticket.member_price)
              - else
                %li
                  = price_to_currency(ticket.member_price)
                  .badge.badge-secondary Member

                - if ticket.guest_of_member? && (current_user.try(:membership_present?) || current_user.is_any?(:member))
                  %li
                    = price_to_currency(ticket.guest_of_member_price)
                    .badge.badge-secondary Guest of Member

                %li
                  = price_to_currency(ticket.non_member_price)
                  .badge.badge-secondary Non-Member
        %td
          - event_ticket_selection = form.object.event_ticket_selection(event_ticket: ticket)

          = form.fields_for :event_ticket_selections, event_ticket_selection do |f|
            = f.hidden_field :event_ticket_id
            = f.hidden_field :quantity, value: 0

            - capacity = event.capacity_selectable(event_ticket: ticket, event_registration: form.object)
            - disabled = (ticket.members? && !is_member)

            - if form.object.selected_expired? && !f.object.errors.present?
              - f.object.assign_attributes(quantity: 0)

            = f.select :quantity, (0..capacity), label: false, disabled: disabled, 
              include_blank: false, input_js: { minimumResultsForSearch: 'Infinity' }

- if waitlist
  %p If the ticket capacity has been reached you will be added to the waitlist.

- unless is_member
  - if all_members_tickets
    .alert.alert-info.mb-4 You must be a member to purchase tickets.
  - elsif any_members_tickets
    .alert.alert-info.mb-4 You must be a member to purchase some of these tickets.
